ENV["RAILS_ENV"] ||= "test"
ENV["DB_SEED"] ||= "true"


require 'debugger'
require File.expand_path("./config/environment.rb")

DatabaseCleaner.clean_with :truncation
silence_stream(STDOUT) do
  require File.join(File.dirname(__FILE__), '../../db/seeds.rb')
end
DatabaseCleaner.strategy = :transaction

#require File.expand_path("../../../config/environment.rb", __FILE__)
#Cms.table_prefix = "cms_"
#require File.expand_path("/Users/davidvezzani/rails-app/browsercms-demo/config/environment.rb")

require 'factory_girl'
require 'factory_girl/step_definitions'
ENV["BROWSERCMS_PATH"] ||= File.expand_path("../browsercms")
#ENV["HOST_AND_PATH"] ||= "localhost:3690"

require "#{ENV["BROWSERCMS_PATH"]}/test/dummy/app/portlets/uses_helper_portlet"
require "#{ENV["BROWSERCMS_PATH"]}/test/support/factory_helpers"
require "#{ENV["BROWSERCMS_PATH"]}/test/support/database_helpers"
require "#{ENV["BROWSERCMS_PATH"]}/test/factories/factories"
require "#{ENV["BROWSERCMS_PATH"]}/test/factories/attachable_factories"
require "#{ENV["BROWSERCMS_PATH"]}/test/mock_file"
require "#{ENV["BROWSERCMS_PATH"]}/test/support/factory_helpers"

#Dir["#{ENV["BROWSERCMS_PATH"]}/features/support/*"].each do |f|
%w{transforms cms_api}.each do |f|
  #require f unless f.match(/^env.rb$/)
  require "#{ENV["BROWSERCMS_PATH"]}/features/support/#{f}"
end

Dir["#{ENV["BROWSERCMS_PATH"]}/features/step_definitions/*"].each do |f|
  require f
end

require "./test/factories/factories"

#require './db/browsercms.seeds'

# require File.expand_path('./test/support/factory_helpers')
# require File.expand_path('./test/support/database_helpers')
# require File.expand_path('./test/factories/factories')
# require File.expand_path('./test/factories/attachable_factories')
# require File.expand_path('./test/mock_file.rb')

include FactoryGirl::Syntax::Methods
include FactoryHelpers 

# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath
Capybara.default_selector = :css

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how 
# your application behaves in the production environment, where an error page will 
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
# begin
#   DatabaseCleaner.strategy = :transaction
# rescue NameError
#   raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
# end

# Before('@no-txn,@selenium,@culerity,@celerity') do
#   # I added this block and changed to transaction because @javascript was truncating most of my tables
#   #DatabaseCleaner.strategy = :truncation, {:except => %w[groups]}
#   DatabaseCleaner.strategy = :truncation
# end

Before('@javascript') do
  # I added this block and changed to transaction because @javascript was truncating most of my tables
  DatabaseCleaner.strategy = :transaction
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { :except => [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
#Cucumber::Rails::Database.javascript_strategy = :truncation
#DatabaseCleaner.clean_with :truncation

# Load the seed data once at the start of the test run.
# By doing this here, and using transaction strategy, we ensure the fastest possible tests.
# DatabaseCleaner.clean_with :truncation
# silence_stream(STDOUT) do
#   require File.join(File.dirname(__FILE__), '../../db/seeds.rb')
# end

